googleAutoComplete <-
function(query,
country = "com",
searchLang = "lang_en",
webInterfacewebInterfaceLang = "en") {
#If query is missing stop the program
if (missing(query))
{
stop("Please enter query and try again")
}
#Load google sub domain data
data(googleSubDomain, package = "googleautocomplete")
query <- tolower(query)
country <- tolower(country)
webInterfaceLang <- tolower(webInterfaceLang)
#Get the domain name for a given country
domainName <-
as.character(googleSubDomain[tolower(googleSubDomain$TLD) == country, 3])
#Check if country code is correct or not
if (identical(domainName, character(0))) {
stop("Please re check your country short code")
}
#Construct the url
subDomain <-
paste0("http://clients1.", domainName)
webInterfaceLang <- paste0("hl=", webInterfaceLang)
query <- paste0("q=", query)
url <-
paste0(subDomain,
"/complete/search?",
webInterfaceLang,
"&output=toolbar&",
query)
tryCatch({
#Read the xml data from url
xmlData <- read_xml(url)
xmlChildren <- xml_find_all(xmlData, ".//suggestion")
result <- data.frame(xml_attr(xmlChildren, "data"))
colnames(result) <- "Result"
return(result)
}, error = function(ex) {
cat("An error was detected")
print(ex)
}, finally = {
cat("Please check language and country code")
})
}
googleAutoComplete("albino")
library(devtools)
install_github("sdorius/GoogleAutoComplete")
usethis::edit_r_environ()
setwd("~/R/search_console")
library(shiny); source('app_starter_console.R')
source('app_starter_console.R')
source('app_starter_console.R')
source('app_starter_console.R')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
source('app_starter_console.R')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
df_1 = read.csv("search_console.csv")
df = df_1[order(df_1$Page),]
df_2 = df[1:4,]
len = length(df$Page)
for (i in 1:len){
word = df$Page[i]
if(df$Page[i+1]==df$Page[i]){next}
token = 0
for (j in 1:4){
df_2 = rbind(df_2,df[i+j,])
}
}
View(df_2)
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
View(df_1)
runApp('my_app')
runApp('my_app')
runApp('my_app')
?vector
?as.vector
runApp('my_app')
runApp('my_app')
runApp('my_app')
?order
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
runApp('my_app')
